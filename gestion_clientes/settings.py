# gestion_clientes/settings.py

"""
Django settings for gestion_clientes project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# ¡IMPORTANTE! Para producción, esto DEBE ser una variable de entorno
# Ejemplo en producción: SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')
# Para desarrollo, puedes dejar esta, pero ¡CAMBIALA por una fuerte en producción!
SECRET_KEY = 'django-insecure-m#d9$b&2m(2&@w=^2h_1-g-u8r2o(t9x7p&w=g_c&x2l!0d8q1q' # ### CAMBIAR por una CLAVE SECRETA FUERTE Y DIFERENTE ###


# SECURITY WARNING: don't run with debug turned on in production!
# Cuando vayas a desplegar a internet, CAMBIA esto a False
# Cambia esto a False para producción
DEBUG = False

# Si DEBUG es False, DEBES listar los hosts permitidos aquí.
# Para desarrollo local: '127.0.0.1', 'localhost'
# Para producción: 'tudominio.com', 'www.tudominio.com', 'tu_ip_del_servidor'
# gestion_clientes/settings.py

# Cuando despliegues, PythonAnywhere te dará un dominio como 'tucuenta.pythonanywhere.com'
# Añádelo aquí después de crear la app web.
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '.pythonanywhere.com'] # Añade el wildcard para facilitar, luego se refina
# Cuando cambies DEBUG a False, deberías añadir tu dominio real aquí.
# Por ejemplo: ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'tudominio.com', 'www.tudominio.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'clientes', # ¡Tu aplicación de clientes!
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gestion_clientes.urls'

# gestion_clientes/settings.py

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Asegúrate de que esta línea esté así
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gestion_clientes.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'db_clientes_django', # Esto lo configurarás en PythonAnywhere
        'USER': 'django_user',       # Esto lo configurarás en PythonAnywhere
        'PASSWORD': 'tu_contrasena_segura', # Esto lo configurarás en PythonAnywhere
        'HOST': 'localhost',         # Para la DB de PythonAnywhere, este suele ser el host
        'PORT': '3306',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'es-co' # ### CAMBIAR: Puedes usar 'es-co' para Colombia, 'es-es' para España, etc. ###

TIME_ZONE = 'America/Bogota' # ### CAMBIAR: Tu zona horaria, ejemplo: 'America/Bogota' ###

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
# Directorio donde Django recolectará todos los archivos estáticos en producción.
# ¡IMPORTANTE! No debe ser el mismo que STATICFILES_DIRS en producción.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Donde Django buscará archivos estáticos adicionales (ej. una carpeta 'static' global en tu proyecto)
# Puedes crear una carpeta 'templates' en la raíz de tu proyecto para plantillas globales.
STATICFILES_DIRS = []


# Media files (user-uploaded files)
# https://docs.djangoproject.com/en/5.0/topics/files/

MEDIA_URL = '/media/'
# Directorio donde se guardarán los archivos subidos por los usuarios (ej. imágenes de productos)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuración para redirección de login/logout
LOGIN_REDIRECT_URL = '/clientes/'  # Redirige aquí después de iniciar sesión
LOGOUT_REDIRECT_URL = '/'          # Redirige aquí después de cerrar sesión
LOGIN_URL = 'login'                # Nombre de la URL para la página de login (la predeterminada de Django es 'login')

# Configuración de Mensajes (Flash messages)
# https://docs.djangoproject.com/en/5.0/ref/contrib/messages/
from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.DEBUG: 'info',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'error',
}